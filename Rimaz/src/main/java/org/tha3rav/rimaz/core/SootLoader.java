package org.tha3rav.rimaz.core;

import org.tha3rav.rimaz.apk.AbstractApk;


import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.file.Path;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import soot.G;
import soot.PackManager;
import soot.PhaseOptions;
import soot.Scene;
import soot.jimple.toolkits.infoflow.InfoFlowAnalysis;
import soot.options.Options;

public class SootLoader extends AbstractSootLoader
{
    private boolean allowPhantomRefs;
    private boolean isWholeProgram;
    private boolean isApp;
    private boolean noBodiesForExcludedClasses;
    //region Constructors
    /**
     * Create an object that loads SOOT with the following parameters
     *
     * @param androidJarsPath : Object representing a path String to the folder containing all the
     *                        android.jar files of all the different platform versions necessary for
     *                        the SOOT framework.
     * @param outputFormat : Object representing the IR (Intermediate Representation) to be used as
     *                     an output format for the SOOT framework.
     */
    public SootLoader(String androidJarsPath, int outputFormat)
    {
        super(androidJarsPath, outputFormat);
    }

    /**
     * Create an object that loads SOOT with the following parameters
     *
     * @param androidJarsPath : Object representing a path String to the folder containing all the
     *                        android.jar files of all the different platform versions necessary for
     *                        the SOOT framework.
     * @param outputFormat : Object representing the IR (Intermediate Representation) to be used as
     *                     an output format for the SOOT framework.
     * @param excludedPackages : Object representing List of packages and respective classes to exclude from APK
     */
    public SootLoader(String androidJarsPath, int outputFormat, List<String> excludedPackages)
    {
        super(androidJarsPath, outputFormat, excludedPackages);
    }

    /**
     * Create an object that loads SOOT with the following parameters
     *
     * @param androidJarsPath : Object representing a path String to the folder containing all the
     *                        android.jar files of all the different platform versions necessary for
     *                        the SOOT framework.
     * @param outputFormat : Object representing the IR (Intermediate Representation) to be used as
     *                     an output format for the SOOT framework.
     * @param excludedPackages : Objects representing packages and respective classes to exclude from APK
     */
    public SootLoader(String androidJarsPath, int outputFormat, String... excludedPackages)
    {
        super(androidJarsPath, outputFormat, excludedPackages);
    }

    /**
     * Create an object that loads SOOT with the following parameters
     *
     * @param androidJarsPath : Object representing a path String to the folder containing all the
     *                        android.jar files of all the different platform versions necessary for
     *                        the SOOT framework.
     * @param outputDirectoryPath : Object representing the path of the folder that contains the output
     *                            data generated by SOOT framework
     * @param outputFormat : Object representing the IR (Intermediate Representation) to be used as
     *                     an output format for the SOOT framework.
     */
    public SootLoader(String androidJarsPath, String outputDirectoryPath, int outputFormat)
    {
        super(androidJarsPath, outputDirectoryPath, outputFormat);
    }

    /**
     * Create an object that loads SOOT with the following parameters
     *
     * @param androidJarsPath : Object representing a path String to the folder containing all the
     *                        android.jar files of all the different platform versions necessary for
     *                        the SOOT framework.
     * @param outputDirectoryPath : Object representing the path of the folder that contains the output
     *                            data generated by SOOT framework
     * @param outputFormat : Object representing the IR (Intermediate Representation) to be used as
     *                     an output format for the SOOT framework.
     * @param excludedPackages : Object representing List of packages and respective classes to exclude from APK
     */
    public SootLoader(String androidJarsPath, String outputDirectoryPath, int outputFormat, List<String> excludedPackages)
    {
        super(androidJarsPath, outputDirectoryPath, outputFormat, excludedPackages);
    }

    /**
     * Create an object that loads SOOT with the following parameters
     *
     * @param androidJarsPath : Object representing a path String to the folder containing all the
     *                        android.jar files of all the different platform versions necessary for
     *                        the SOOT framework.
     * @param outputDirectoryPath : Object representing the path of the folder that contains the output
     *                            data generated by SOOT framework
     * @param outputFormat : Object representing the IR (Intermediate Representation) to be used as
     *                     an output format for the SOOT framework.
     * @param excludedPackages : Objects representing packages and respective classes to exclude from APK
     */
    public SootLoader(String androidJarsPath, String outputDirectoryPath, int outputFormat, String... excludedPackages)
    {
        super(androidJarsPath, outputDirectoryPath, outputFormat, excludedPackages);
    }
    //endregion


    //region Methods
    /**
     * Initializes the SOOT framework.
     *
     * @param allowPhantomRefs : Object making SOOT bypassing the references to classes it can't find.
     * @param isWholeProgram : Object that sets SOOT's whole-program mode parameter.
     * @param isApp : Object that sets SOOT's Application mode parameter.
     * @param noBodiesForExcludedClasses : Object that excludes returning the bodies of the methods
     *                                   belonging to excluded classes.
     */
    @Override
    public SootLoader initialize(boolean allowPhantomRefs,
                                 boolean isWholeProgram,
                                 boolean isApp,
                                 boolean noBodiesForExcludedClasses)
    {
        this.allowPhantomRefs = allowPhantomRefs;
        this.isWholeProgram = isWholeProgram;
        this.isApp = isApp;
        this.noBodiesForExcludedClasses = noBodiesForExcludedClasses;

        this.setIsSootLoaderInitialized(true);

        return this;
    }

    public Scene LoadApk(AbstractApk apk)
    {
        G.reset();

        //Options.v().set_verbose(false);
        Options.v().set_allow_phantom_refs(allowPhantomRefs);
        Options.v().set_process_dir(Collections.singletonList(apk.getApkPath().toString()));
        Options.v().set_src_prec(Options.src_prec_apk);
        Options.v().set_android_jars(this.getAndroidJarsPath());
        Options.v().set_output_format(outputFormat);
        Options.v().set_output_dir(getOutputDirectoryPath().get());
        Options.v().set_app(isApp);
        Options.v().set_whole_program(isWholeProgram);
        Options.v().set_process_multiple_dex(true);
        Options.v().set_exclude(getExcludedPackages());
        Options.v().set_no_bodies_for_excluded(noBodiesForExcludedClasses);

        Scene.v().loadNecessaryClasses();
        PackManager.v().runPacks();

        return Scene.v();
    }

    public Scene LoadApk(String apkPath)
    {
        G.reset();

        //Options.v().set_verbose(false);
        Options.v().set_allow_phantom_refs(allowPhantomRefs);
        Options.v().set_process_dir(Collections.singletonList(apkPath));
        Options.v().set_src_prec(Options.src_prec_apk);
        Options.v().set_android_jars(this.getAndroidJarsPath());
        Options.v().set_output_format(outputFormat);
        Options.v().set_output_dir(getOutputDirectoryPath().get());
        Options.v().set_app(isApp);
        Options.v().set_whole_program(isWholeProgram);
        Options.v().set_process_multiple_dex(true);
        Options.v().set_exclude(getExcludedPackages());
        Options.v().set_no_bodies_for_excluded(noBodiesForExcludedClasses);

        Scene.v().loadNecessaryClasses();

        PackManager.v().runPacks();
        return Scene.v();
    }

    public Scene LoadApk(Path apkPath)
    {
        G.reset();

        //Options.v().set_verbose(false);
        Options.v().set_allow_phantom_refs(allowPhantomRefs);
        Options.v().set_process_dir(Collections.singletonList(apkPath.toString()));
        Options.v().set_src_prec(Options.src_prec_apk);
        Options.v().set_android_jars(this.getAndroidJarsPath());
        Options.v().set_output_format(outputFormat);
        Options.v().set_output_dir(getOutputDirectoryPath().get());
        Options.v().set_app(isApp);
        Options.v().set_whole_program(isWholeProgram);
        Options.v().set_process_multiple_dex(true);
        Options.v().set_exclude(getExcludedPackages());
        Options.v().set_no_bodies_for_excluded(noBodiesForExcludedClasses);

        Scene.v().loadNecessaryClasses();

        //PackManager.v().runPacks();

        return Scene.v();
    }

    //endregion
}
